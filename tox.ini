[tox]
envlist = flake8, mypy, py38, py37, py36, docs
skipsdist = True
ignore_basepython_conflict = True

[testenv:py38]
basepython = python3.8
deps =
    pipenv
    pytest
    pytest-cov
    pytest-asyncio
    Cython
    docker
    oef==0.8.1
    colorlog
    gym
    numpy

commands =
    pip install git+https://github.com/pytoolz/cytoolz.git#egg=cytoolz==0.10.1.dev0
    pip install -e .[all]
    pip install -i https://test.pypi.org/simple/ fetch-p2p-api==0.0.2
    pytest --doctest-modules aea packages/fetchai/protocols packages/fetchai/connections tests/ --cov-report=html --cov-report=term --cov=aea --cov=packages/fetchai/protocols --cov=packages/fetchai/connections {posargs}

[testenv:py37]
basepython = python3.7
deps =
    pipenv
    pytest
    pytest-cov
    pytest-asyncio
    gym
    numpy
    tensorflow

commands =
    pipenv install
    pip install -e .[all]
    pytest --doctest-modules aea packages/fetchai/protocols packages/fetchai/connections tests/ --cov-report=html --cov-report=term --cov=aea --cov=packages/fetchai/protocols --cov=packages/fetchai/connections {posargs}

[testenv:py36]
basepython = python3.6
deps =
    pipenv
    pytest
    pytest-cov
    pytest-asyncio
    gym
    numpy
    tensorflow

commands =
    pipenv install
    pip install -e .[all]
    pytest --doctest-modules aea packages/fetchai/protocols packages/fetchai/connections tests/ --cov-report=html --cov-report=term --cov=aea --cov=packages/fetchai/protocols --cov=packages/fetchai/connections {posargs}

[testenv:black]
basepython=python3.7
deps = black
commands=black aea examples packages scripts tests

[testenv:black-check]
basepython=python3.7
deps = black
commands=black aea examples packages scripts tests --check --verbose

[testenv:flake8]
basepython = python3.7
deps = flake8
       flake8-docstrings
       flake8-import-order
       flake8-bugbear
       pydocstyle==3.0.0
commands = flake8 aea examples packages scripts tests

[testenv:mypy]
basepython = python3.7
deps = mypy
commands = mypy aea packages tests scripts

[testenv:bandit-main]
basepython = python3.7
deps = bandit
commands = bandit -s B101,B105,B301,B403,B404,B603,B605,B607,B608 -r aea packages scripts

[testenv:bandit-tests]
basepython = python3.7
deps = bandit
commands = bandit -s B101,B104,B301,B306,B403,B404,B603 -r tests

[testenv:safety]
basepython = python3.7
deps = safety==1.8.5
commands = safety check

[testenv:liccheck]
basepython = python3.7
deps = 
    pipenv
    liccheck==0.4.0
commands =
    ; we need to extract only the main dependencies from the Pipfile.lock
    ; as the license check must be done only on the main (non-dev) dependencies.
    pipenv install
    {toxinidir}/scripts/parse_main_dependencies_from_lock.py Pipfile.lock -o {envtmpdir}/main_requirements.txt
    liccheck -s strategy.ini -r {envtmpdir}/main_requirements.txt -l PARANOID

[testenv:copyright_notice]
basepython = python3.7
commands = {toxinidir}/scripts/check_copyright_notice.py --directory {toxinidir}

[testenv:docs]
description = Build the documentation.
basepython = python3.7
deps = mkdocs
       mkdocs-material
       pymdown-extensions==6.2.1
commands =
    pip install git+https://github.com/pugong/mkdocs-mermaid-plugin.git
    pip install bs4
    mkdocs build --clean

[testenv:docs-serve]
description = Run a development server for working on documentation.
basepython = python3.7
deps = mkdocs
       mkdocs-material
       pymdown-extensions==6.2.1
commands = mkdocs build --clean
           python -c 'print("###### Starting local server. Press Control+C to stop server ######")'
           mkdocs serve -a localhost:8080
